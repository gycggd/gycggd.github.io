<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Recognition on Guoyc&#39;s blog</title>
    <link>http://guoyc.com/en/tags/recognition/</link>
    <description>Recent content in Recognition on Guoyc&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>gycggd@gmail.com (Guo, Yuchen)</managingEditor>
    <webMaster>gycggd@gmail.com (Guo, Yuchen)</webMaster>
    <lastBuildDate>Sat, 14 Oct 2017 00:14:02 +0000</lastBuildDate>
    
	<atom:link href="http://guoyc.com/en/tags/recognition/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Face Detection &amp; Recognition</title>
      <link>http://guoyc.com/en/post/face-recognition/</link>
      <pubDate>Sat, 14 Oct 2017 00:14:02 +0000</pubDate>
      <author>gycggd@gmail.com (Guo, Yuchen)</author>
      <guid>http://guoyc.com/en/post/face-recognition/</guid>
      <description>Preprocessing Histogram Equalization Use cdf to transform intensity.
function eqimg = histogramequalization(img) maximum = round(max(img(:))); minimum = round(min(img(:))); counts = zeros(maximum-minimum+1, 1); [h, w] = size(img); for i = 1:h for j = 1:w counts(round(img(i, j)-minimum+1)) = counts((img(i, j)-minimum)+1) + 1; end end for i = 2:length(counts) counts(i) = counts(i) + counts(i-1); end eqimg = img; for i = 1:h for j = 1:w eqimg(i, j) = (counts(round(img(i, j)-minimum)+1)/(h*w)) * (maximum-minimum) + minimum; end end end  Face Detection Image Pyramid and Neural Network Integral Image and AdaBoost Use Viola-Jones&amp;rsquo;s method to get features and use AdaBoost to combine many weak classifiers into a strong classifier</description>
    </item>
    
    <item>
      <title>Using Hough Transform to detect lines and circles</title>
      <link>http://guoyc.com/en/post/hough/</link>
      <pubDate>Wed, 27 Sep 2017 08:03:08 +0000</pubDate>
      <author>gycggd@gmail.com (Guo, Yuchen)</author>
      <guid>http://guoyc.com/en/post/hough/</guid>
      <description> Hough-Line function [H, theta, r] = myhough(BW) [h, w] = size(BW); theta_low = -pi/2; theta_high = pi/2; r_low = -sqrt(h^2+w^2); r_high = sqrt(h^2+w^2); num_theta = 180; num_r = round(r_high*2); H = zeros(num_theta, num_r); for x = 1:h for y = 1:w if BW(x, y)==1 for i = 1:num_theta theta = theta_low + (i-1)/num_theta*(theta_high-theta_low); r = x*cos(theta) + y*sin(theta); j = round(1 + (num_r-1) * (r-r_low)/(r_high-r_low)); H(i, j) = H(i, j) + 1; end end end end [m, I] = max(H(:)); [i, j] = ind2sub(size(H), I); theta = theta_low + (i-1)/num_theta*(theta_high-theta_low); r = r_low + (j-1)/num_r*(r_high-r_low); while (abs(theta)&amp;lt;=pi/90 &amp;amp;&amp;amp; (abs(r)&amp;lt;=2 || abs(abs(r)-h)&amp;lt;=2)) || (abs(pi/2-abs(theta))&amp;lt;=pi/90 &amp;amp;&amp;amp; (abs(r)&amp;lt;=2 || abs(abs(r)-w)&amp;lt;=2)) H(i, j) = 0; [m, I] = max(H(:)); [i, j] = ind2sub(size(H), I); theta = theta_low + (i-1)/num_theta*(theta_high-theta_low); r = r_low + (j-1)/num_r*(r_high-r_low); end end  Hough-Circle function [x, y, R] = myhoughcircle(BW, max_r, k, gap) [h, w] = size(BW); num_x = h; num_y = w; if nargin &amp;lt; 2 || isempty(max_r) max_r = min(h/2, w/2); end if nargin &amp;lt; 3 k = 1; end if nargin &amp;lt; 4 gap = 20; end H = zeros(num_x, num_y, max_r); for i = 1:h for j = 1:w if BW(i, j)==1 for a = 1:num_x for b = 1:num_y r = round(sqrt((a-i)^2+(b-j)^2)); if r&amp;gt;0 &amp;amp;&amp;amp; r&amp;lt;=max_r H(a, b, r) = H(a, b, r) + 1; end end end end end end img = cat(3, BW, BW, BW)*255; hh = H(:); prex = 0; prey = 0; preR = 0; idx = 1; while idx&amp;lt;=k [~, I] = max(hh); [x, y, R] = ind2sub(size(H), I); hh(I) = 0; if (x-prex)&amp;lt;=gap &amp;amp;&amp;amp; (y-prey)&amp;lt;=gap &amp;amp;&amp;amp; (R-preR)&amp;lt;=gap continue end for i = 1:h for j = 1:w computed_r = sqrt((i-x)^2+(j-y)^2); if abs(computed_r-R)&amp;lt;=1 img(i, j, :) = [255, 0, 0]; end end end prex = x; prey = y; preR = R; idx = idx+1; end end  </description>
    </item>
    
  </channel>
</rss>