<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dynamic Programming on Guoyc&#39;s blog</title>
    <link>http://guoyc.com/en/tags/dynamic-programming/</link>
    <description>Recent content in Dynamic Programming on Guoyc&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>gycggd@gmail.com (Guo, Yuchen)</managingEditor>
    <webMaster>gycggd@gmail.com (Guo, Yuchen)</webMaster>
    <lastBuildDate>Sun, 18 Mar 2018 12:53:17 +0800</lastBuildDate>
    
	<atom:link href="http://guoyc.com/en/tags/dynamic-programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Leetcode Weekly Contest 76</title>
      <link>http://guoyc.com/en/post/leetcode_weekly_contest_76/</link>
      <pubDate>Sun, 18 Mar 2018 12:53:17 +0800</pubDate>
      <author>gycggd@gmail.com (Guo, Yuchen)</author>
      <guid>http://guoyc.com/en/post/leetcode_weekly_contest_76/</guid>
      <description>800. Similar RGB Color This is so easy, just split into 3 parts, and for each part find the closest &amp;lsquo;XX&amp;rsquo; format value. For &amp;lsquo;XY&amp;rsquo;, the closes must be among &amp;lsquo;XX&amp;rsquo;, &amp;lsquo;(X-1)(X-1)&amp;rsquo;, &amp;lsquo;(X+1)(X+1)&amp;rsquo;, so check them all and choose cloest. My 5-line code here: def similarRGB(self, color): ret = &#39;#&#39; for i in range(1, 6, 2): c1, c2 = [int(_) if &#39;0&#39;&amp;lt;=_&amp;lt;=&#39;9&#39; else 10+ord(_)-ord(&#39;a&#39;) for _ in color[i:i+2]] c =</description>
    </item>
    
    <item>
      <title>LeetCode 42: Trapping Rain Water I &amp; II</title>
      <link>http://guoyc.com/en/post/rain_drop/</link>
      <pubDate>Wed, 14 Mar 2018 19:41:00 +0800</pubDate>
      <author>gycggd@gmail.com (Guo, Yuchen)</author>
      <guid>http://guoyc.com/en/post/rain_drop/</guid>
      <description>42.Trapping Rain Water and 407.Trapping Rain Water II are very interesting problems.
Trapping Rain Water This problem is taged with &amp;ldquo;Two Pointers&amp;rdquo; and &amp;ldquo;Stack&amp;rdquo;, they corresponds to two different solutions.
Two Pointers Solution Let hl=height[0] and rl=height[len(height)-1] be height of left border and height of right border, and left=1, right=len(height)-2.
This is a 1-D pool, so there are only two borders left and right, and space between them can trap min(hl, hr) water.</description>
    </item>
    
  </channel>
</rss>