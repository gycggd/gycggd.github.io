<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stack on 郭玉晨的博客</title>
    <link>http://guoyc.com/tags/stack/</link>
    <description>Recent content in Stack on 郭玉晨的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <managingEditor>gycggd@gmail.com (Guo, Yuchen)</managingEditor>
    <webMaster>gycggd@gmail.com (Guo, Yuchen)</webMaster>
    <lastBuildDate>Tue, 03 Apr 2018 18:59:41 +0800</lastBuildDate>
    
	<atom:link href="http://guoyc.com/tags/stack/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>LeetCode 32. Longest Valid Parentheses</title>
      <link>http://guoyc.com/post/longest_valid_p/</link>
      <pubDate>Tue, 03 Apr 2018 18:59:41 +0800</pubDate>
      <author>gycggd@gmail.com (Guo, Yuchen)</author>
      <guid>http://guoyc.com/post/longest_valid_p/</guid>
      <description>三个解法 动态规划解法 代码如下： class Solution: def longestValidParentheses(self, s): length = [0]*len(s) for i in range(len(s)): if s[i]==&#39;(&#39;: length[i] = 0 elif i-1&amp;gt;=0: if s[i-1]==&#39;(&#39;: length[i] = (length[i-2] if i-2&amp;gt;=0 else 0)+2 elif i-1-length[i-1]&amp;gt;=0 and s[i-1-length[i-1]]==&#39;(&#39;: length[i] = 2+length[i-1]+(length[i-2-length[i-1]] if i-2-length[i-1]&amp;gt;=0 else 0) return max(length) if len(s)&amp;gt;0 else 0 栈解法 栈解法，遇到匹</description>
    </item>
    
  </channel>
</rss>